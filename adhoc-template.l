(defpackage "adhoc-template")
(in-package "adhoc-template")
(use-package '("user" "editor" "misc-utils"))

(defun read-config-block (block-head in)
  (labels ((collect-lines (in)
	     (let ((lines '()))
	       (catch 'block-end
		 (each-line (line in)
		   (if (string-looking-at "//@" line)
		       (throw 'block-end (list lines line)))
		   (push line lines))
		 (list lines nil)))))
    (let ((config (list (substring block-head 3)))
	  (lines-and-next-head (collect-lines in)))
      (setf (cdr config) (join-string (reverse (car lines-and-next-head)) "\n"))
      (values config (cadr lines-and-next-head)))))

(defun read-configs (in)
  (labels ((line-to-config (line)
	     (let ((lst (re-split-string line ":[ \t]?" t :number-of-fields 2)))
	       (cons (car lst) (cadr lst)))))
    (let ((configs '())
	  config
	  block-head)
      (each-line (line in)
	(cond ((emptyp line)
	       nil)
	      ((string-looking-at "//@" line)
	       (setq block-head line)
	       (while block-head
		 (multiple-value-setq (config block-head)
		   (read-config-block block-head in))
		 (push config configs)))
	      (t
	       (push (line-to-config line) configs))))
      configs)))

(defun split-into-tokens (in)
  (let* ((tag-sets '((#\< #\%)
		     (#\% #\>)))
	 (tag-heads (mapcar #'car tag-sets))
	 (last-index (1- (length in))))
    (labels ((tagp (in tag-head-index)
	       (and tag-head-index
		    (< tag-head-index last-index)
		    (char= (elt in (1+ tag-head-index)) (cadr (assoc (elt in tag-head-index) tag-sets)))))
	     (tag-head-pos (in head-index)
	       (position-if #'(lambda (chr)
				(member chr tag-heads)) in :start head-index))
	     (tag-pos (in head-index)
	       (do ((tag-head-index (tag-head-pos in head-index) (tag-head-pos in (1+ tag-head-index))))
		   ((or (and tag-head-index (tagp in tag-head-index)) (null tag-head-index))
		    tag-head-index)))
	     (read-token (in head-index tokens)
	       (let* ((tag-head-index (tag-pos in head-index))
		      (tag (and (tagp in tag-head-index) (subseq in tag-head-index (+ tag-head-index 2)))))
		 (if tag
		     (read-token in (+ tag-head-index 2)  (cons tag (cons (substring in head-index tag-head-index) tokens)))
		   (cons (substring in head-index) tokens)))))
      (nreverse (read-token in 0 '())))))

